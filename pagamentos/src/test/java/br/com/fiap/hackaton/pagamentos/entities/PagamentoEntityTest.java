package br.com.fiap.hackaton.pagamentos.entities;

import br.com.fiap.hackaton.pagamentos.entities.enuns.MetodoPagamentoEnum;
import br.com.fiap.hackaton.pagamentos.entities.enuns.StatusPagamentoEnum;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

public class PagamentoEntityTest {

    @Test
    public void testDefaultConstructor() {
        PagamentoEntity pagamento = new PagamentoEntity();
        assertNull(pagamento.getId());
        assertNull(pagamento.getCpf());
        assertNull(pagamento.getNumero());
        assertNull(pagamento.getDataValidade());
        assertNull(pagamento.getCvv());
        assertNull(pagamento.getValorCompra());
        assertEquals("Compra do produto X", pagamento.getDescricao());
        assertEquals(MetodoPagamentoEnum.CARTAO_CREDITO, pagamento.getMetodoPagamento());
        assertNull(pagamento.getStatusPagamento());
    }

    @Test
    public void testParameterizedConstructor() {
        String cpf = "12345678901";
        String numero = "1234567890123456";
        String dataValidade = "12/25";
        String cvv = "123";
        BigDecimal valorCompra = new BigDecimal("100.00");

        PagamentoEntity pagamento = new PagamentoEntity(cpf, numero, dataValidade, cvv, valorCompra);

        assertNull(pagamento.getId()); // ID should be null because it is generated by the database
        assertEquals(cpf, pagamento.getCpf());
        assertEquals(numero, pagamento.getNumero());
        assertEquals(dataValidade, pagamento.getDataValidade());
        assertEquals(cvv, pagamento.getCvv());
        assertEquals(valorCompra, pagamento.getValorCompra());
        assertEquals("Compra do produto X", pagamento.getDescricao());
        assertEquals(MetodoPagamentoEnum.CARTAO_CREDITO, pagamento.getMetodoPagamento());
        assertNull(pagamento.getStatusPagamento());
    }

    @Test
    public void testSettersAndGetters() {
        PagamentoEntity pagamento = new PagamentoEntity();

        pagamento.setCpf("12345678901");
        assertEquals("12345678901", pagamento.getCpf());

        pagamento.setNumero("1234567890123456");
        assertEquals("1234567890123456", pagamento.getNumero());

        pagamento.setDataValidade("12/25");
        assertEquals("12/25", pagamento.getDataValidade());

        pagamento.setCvv("123");
        assertEquals("123", pagamento.getCvv());

        BigDecimal valorCompra = new BigDecimal("100.00");
        pagamento.setValorCompra(valorCompra);
        assertEquals(valorCompra, pagamento.getValorCompra());

        pagamento.setDescricao("Compra do produto Y");
        assertEquals("Compra do produto Y", pagamento.getDescricao());

        // Testando enums
        pagamento.setMetodoPagamento(MetodoPagamentoEnum.CARTAO_CREDITO);
        assertEquals(MetodoPagamentoEnum.CARTAO_CREDITO, pagamento.getMetodoPagamento());

        pagamento.setStatusPagamento(StatusPagamentoEnum.APROVADO);
        assertEquals(StatusPagamentoEnum.APROVADO, pagamento.getStatusPagamento());
    }
}
